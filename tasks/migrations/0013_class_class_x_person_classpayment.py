# Generated by Django 2.0.3 on 2018-06-21 19:52

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('books', '0026_auto_20180611_1321'),
        ('inventory', '0007_auto_20171103_1431'),
        ('members', '0019_auto_20180422_1221'),
        ('tasks', '0012_auto_20180522_2344'),
    ]

    operations = [
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the class.', max_length=80)),
                ('short_desc', models.CharField(blank=True, help_text='Short description of the class.', max_length=256)),
                ('info', models.TextField(help_text='Detailed info about the class.', max_length=2048)),
                ('canceled', models.BooleanField(default=False, help_text='Has the class been canceled?')),
                ('max_students', models.IntegerField(blank=True, help_text='The max class size. If not blank, RSVPs are required.', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('member_price', models.DecimalField(decimal_places=2, help_text='Price of class for members.', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('nonmember_price', models.DecimalField(decimal_places=2, help_text='Price of class for nonmembers (general public).', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('materials_fee', models.DecimalField(decimal_places=2, help_text='Cost of materials used in class. Same for members and nonmembers.', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('minor_policy', models.CharField(choices=[('ALON', 'May attend, unaccompanied'), ('WPAR', 'May attend, with parent'), ('NONE', 'Not allowed')], help_text='Are minors allowed in this class?', max_length=4)),
                ('publicity_image', models.ImageField(blank=True, help_text='An image to be used when publicizing this class.', null=True, upload_to='')),
                ('printed_handout', models.FileField(blank=True, help_text='A file to be printed and handed out to students.', null=True, upload_to='')),
                ('certification_tag', models.ForeignKey(blank=True, help_text='The certification that a student will receive upon completion of course.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='completed_class_set', to='members.Tag')),
                ('department', models.ForeignKey(blank=True, help_text='The department/shop presenting this class.', null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.Shop')),
                ('prerequisite_tag', models.ForeignKey(blank=True, help_text='A certification that the student must already have to enroll in this class.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='dependent_class_set', to='members.Tag')),
                ('teaching_task', models.ForeignKey(blank=True, help_text='The teaching task associated with this class.', null=True, on_delete=django.db.models.deletion.PROTECT, to='tasks.Task')),
            ],
            options={
                'verbose_name_plural': 'Classes',
            },
        ),
        migrations.CreateModel(
            name='Class_x_Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('RMND', 'Person wants a reminder a couple days before class.'), ('RSVP', 'Person has RSVPed for the class.'), ('ARVD', 'Person has arrived to take the class.'), ('NOSH', 'Person did not arrive in time to take the class.'), ('TURN', 'Person showed up but no room for them in the class.')], help_text='The current status of this person for this class.', max_length=4)),
                ('status_updated', models.DateTimeField(blank=True, help_text='The date/time on which the current status was last updated.', null=True)),
                ('the_class', models.ForeignKey(help_text='The class that somebody is interested in.', on_delete=django.db.models.deletion.CASCADE, to='tasks.Class')),
                ('the_person', models.ForeignKey(help_text='The person who is interested in the class.', on_delete=django.db.models.deletion.PROTECT, to='members.Member')),
            ],
        ),
        migrations.CreateModel(
            name='ClassPayment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sale_price', models.DecimalField(decimal_places=2, help_text='The UNIT price at which this/these item(s) sold.', max_digits=6)),
                ('qty_sold', models.IntegerField(blank=True, default=None, help_text='The quantity of the item sold. Leave blank if quantity is not known.', null=True)),
                ('financial_aid_discount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Amount discounted because person qualifies for aid on basis of TANF or low income.', max_digits=6, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('class_x_person', models.ForeignKey(blank=True, help_text='The person who will attend the class.', null=True, on_delete=django.db.models.deletion.PROTECT, to='tasks.Class_x_Person')),
                ('sale', models.ForeignKey(help_text='The sale for which this is a line item.', on_delete=django.db.models.deletion.CASCADE, to='books.Sale')),
                ('the_class', models.ForeignKey(help_text='The class that is being paid for.', on_delete=django.db.models.deletion.PROTECT, to='tasks.Class')),
                ('the_person', models.ForeignKey(help_text='The person who will attend the class.', on_delete=django.db.models.deletion.PROTECT, to='members.Member')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
